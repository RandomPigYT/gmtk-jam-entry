!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/randompigyt/Hogxel-Engine/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
$(PROJ_OBJ)/%.o	src/doom-style-renderer/Makefile	/^$(PROJ_OBJ)\/%.o: $(PROJ_SRC)\/%.c$/;"	t
$(PROJ_OBJ)/%.o	src/test/Makefile	/^$(PROJ_OBJ)\/%.o: $(PROJ_SRC)\/%.c$/;"	t
$(PROJ_OBJ)/%.s	src/doom-style-renderer/Makefile	/^$(PROJ_OBJ)\/%.s: $(PROJ_SRC)\/%.c$/;"	t
$(PROJ_OBJ)/%.s	src/test/Makefile	/^$(PROJ_OBJ)\/%.s: $(PROJ_SRC)\/%.c$/;"	t
$(TARGET)	src/doom-style-renderer/Makefile	/^$(TARGET): $(OBJS) $(ASMS)$/;"	t
$(TARGET)	src/test/Makefile	/^$(TARGET): $(OBJS) $(ASMS)$/;"	t
ASMS	src/doom-style-renderer/Makefile	/^	ASMS := $(patsubst $(PROJ_SRC)\/%.c, $(PROJ_OBJ)\/%.s, $(SRCS))$/;"	m
ASMS	src/test/Makefile	/^	ASMS := $(patsubst $(PROJ_SRC)\/%.c, $(PROJ_OBJ)\/%.s, $(SRCS))$/;"	m
Arena	src/util/arena.h	/^struct Arena {$/;"	s
ArenaSaveState	src/util/arena.h	/^typedef size_t ArenaSaveState;$/;"	t	typeref:typename:size_t
BACKWARDS	src/test/main.c	/^  BACKWARDS,$/;"	e	enum:direction	file:
BLOCKS_GUARDS	src/doom-style-renderer/load-scene.c	/^  BLOCKS_GUARDS()$/;"	e	enum:BlockGuard	file:
BLOCKS_GUARDS	src/doom-style-renderer/load-scene.c	/^#define BLOCKS_GUARDS(/;"	d	file:
BLOCK_COUNT	src/doom-style-renderer/load-scene.c	/^  BLOCK_COUNT,$/;"	e	enum:BlockType	file:
BLOCK_TYPE_NONE	src/doom-style-renderer/load-scene.c	/^  BLOCK_TYPE_NONE = 0,$/;"	e	enum:BlockType	file:
BLOCK_TYPE_SECTORS	src/doom-style-renderer/load-scene.c	/^  BLOCK_TYPE_SECTORS,$/;"	e	enum:BlockType	file:
BLOCK_TYPE_VERTS	src/doom-style-renderer/load-scene.c	/^  BLOCK_TYPE_VERTS,$/;"	e	enum:BlockType	file:
BLOCK_TYPE_WALLS	src/doom-style-renderer/load-scene.c	/^  BLOCK_TYPE_WALLS,$/;"	e	enum:BlockType	file:
BlockGuard	src/doom-style-renderer/load-scene.c	/^enum BlockGuard {$/;"	g	file:
BlockType	src/doom-style-renderer/load-scene.c	/^enum BlockType {$/;"	g	file:
DA_APPEND	src/util/dynamic_array.h	/^#define DA_APPEND(/;"	d
DA_APPEND_NO_ASSIGN	src/util/dynamic_array.h	/^#define DA_APPEND_NO_ASSIGN(/;"	d
DA_AT	src/util/dynamic_array.h	/^#define DA_AT(/;"	d
DA_FREE	src/util/dynamic_array.h	/^#define DA_FREE(/;"	d
DA_GROW_FACTOR	src/util/dynamic_array.h	/^#define DA_GROW_FACTOR /;"	d
DA_INIT_CAPACITY	src/util/dynamic_array.h	/^#define DA_INIT_CAPACITY /;"	d
DA_POP	src/util/dynamic_array.h	/^#define DA_POP(/;"	d
DA_TYPE	src/util/dynamic_array.h	/^#define DA_TYPE(/;"	d
DA_TYPE_ARRAY	src/util/dynamic_array.h	/^#define DA_TYPE_ARRAY(/;"	d
DEPS	src/doom-style-renderer/Makefile	/^DEPS := $(patsubst $(PROJ_SRC)\/%.c, $(PROJ_OBJ)\/%.d, $(SRCS))$/;"	m
DEPS	src/test/Makefile	/^DEPS := $(patsubst $(PROJ_SRC)\/%.c, $(PROJ_OBJ)\/%.d, $(SRCS))$/;"	m
DIR_COUNT	src/test/main.c	/^  DIR_COUNT,$/;"	e	enum:direction	file:
DOOM_STYLE_RENDERER_H	include/doom-style-renderer.h	/^#define DOOM_STYLE_RENDERER_H$/;"	d
DOWN	src/test/main.c	/^  DOWN,$/;"	e	enum:direction	file:
DSR_COLOUR	include/doom-style-renderer.h	/^#define DSR_COLOUR(/;"	d
DSR_FLT_EPSILON	include/doom-style-renderer.h	/^#define DSR_FLT_EPSILON /;"	d
DSR_PIXEL_AT	include/doom-style-renderer.h	/^#define DSR_PIXEL_AT(/;"	d
DSR_RENDER_WALLS_H	src/doom-style-renderer/render-walls/render-walls.h	/^#define DSR_RENDER_WALLS_H$/;"	d
DSR_RENDER_WALL_PROJ_MATH_H	src/doom-style-renderer/render-walls/proj-math.h	/^#define DSR_RENDER_WALL_PROJ_MATH_H$/;"	d
FACTOR	src/test/main.c	/^#define FACTOR /;"	d	file:
FORWARD	src/test/main.c	/^  FORWARD = 0,$/;"	e	enum:direction	file:
HEIGHT	src/test/main.c	/^#define HEIGHT /;"	d	file:
HOG_CAMERA_H	src/common/camera.h	/^#define HOG_CAMERA_H$/;"	d
HOG_ORTHOGRAPHIC_PROJECTION	src/common/camera.h	/^  HOG_ORTHOGRAPHIC_PROJECTION,$/;"	e	enum:hog_ProjType
HOG_PERSPECTIVE_PROJECTION	src/common/camera.h	/^  HOG_PERSPECTIVE_PROJECTION,$/;"	e	enum:hog_ProjType
HOG_PROJECTION_NONE	src/common/camera.h	/^  HOG_PROJECTION_NONE = 0,$/;"	e	enum:hog_ProjType
INCLUDES	src/doom-style-renderer/Makefile	/^INCLUDES := $(shell find $(PROJ_INCLUDE) -type f -name "*.h")$/;"	m
INCLUDES	src/test/Makefile	/^INCLUDES := $(shell find $(PROJ_INCLUDE) -type f -name "*.h")$/;"	m
LEFT	src/test/main.c	/^  LEFT,$/;"	e	enum:direction	file:
OBJS	src/doom-style-renderer/Makefile	/^OBJS := $(patsubst $(PROJ_SRC)\/%.c, $(PROJ_OBJ)\/%.o, $(SRCS))$/;"	m
OBJS	src/test/Makefile	/^OBJS := $(patsubst $(PROJ_SRC)\/%.c, $(PROJ_OBJ)\/%.o, $(SRCS))$/;"	m
PAGE_SIZE	src/doom-style-renderer/render-walls/render-walls.c	/^#define PAGE_SIZE /;"	d	file:
PAGE_SIZE	src/test/main.c	/^#define PAGE_SIZE /;"	d	file:
PARSE_ERRORS	src/doom-style-renderer/load-scene.c	/^	PARSE_ERRORS()$/;"	e	enum:ParseErrors	file:
PARSE_ERRORS	src/doom-style-renderer/load-scene.c	/^#define PARSE_ERRORS(/;"	d	file:
PLAYER_ANGULAR_SPEED	src/test/main.c	/^#define PLAYER_ANGULAR_SPEED /;"	d	file:
PLAYER_SPEED	src/test/main.c	/^#define PLAYER_SPEED /;"	d	file:
PROJ_BIN	src/doom-style-renderer/Makefile	/^PROJ_BIN := $(ROOT_PATH)\/$(BIN)$/;"	m
PROJ_BIN	src/test/Makefile	/^PROJ_BIN := $(ROOT_PATH)\/$(BIN)$/;"	m
PROJ_INCLUDE	src/doom-style-renderer/Makefile	/^PROJ_INCLUDE := $(ROOT_PATH)\/$(INCLUDE)$/;"	m
PROJ_INCLUDE	src/test/Makefile	/^PROJ_INCLUDE := $(ROOT_PATH)\/$(INCLUDE)$/;"	m
PROJ_OBJ	src/doom-style-renderer/Makefile	/^PROJ_OBJ := $(ROOT_PATH)\/$(OBJ)\/doom-style-renderer$/;"	m
PROJ_OBJ	src/test/Makefile	/^PROJ_OBJ := $(ROOT_PATH)\/$(OBJ)\/test$/;"	m
PROJ_SRC	src/doom-style-renderer/Makefile	/^PROJ_SRC := $(ROOT_PATH)\/$(SRC)\/doom-style-renderer$/;"	m
PROJ_SRC	src/test/Makefile	/^PROJ_SRC := $(ROOT_PATH)\/$(SRC)\/test$/;"	m
ParseErrors	src/doom-style-renderer/load-scene.c	/^enum ParseErrors {$/;"	g	file:
Portal	src/doom-style-renderer/render-walls/render-walls.c	/^struct Portal {$/;"	s	file:
PortalMask	src/doom-style-renderer/render-walls/render-walls.c	/^struct PortalMask {$/;"	s	file:
PortalQueue	src/doom-style-renderer/render-walls/render-walls.c	/^struct PortalQueue {$/;"	s	file:
RIGHT	src/test/main.c	/^  RIGHT,$/;"	e	enum:direction	file:
RenderWallArgs	src/doom-style-renderer/render-walls/render-walls.c	/^struct RenderWallArgs {$/;"	s	file:
SECTOR_FIELDS_COUNT	src/doom-style-renderer/load-scene.c	/^  SECTOR_FIELDS_COUNT,$/;"	e	enum:SectorFields	file:
SECTOR_FIELD_CEIL_HEIGHT	src/doom-style-renderer/load-scene.c	/^  SECTOR_FIELD_CEIL_HEIGHT,$/;"	e	enum:SectorFields	file:
SECTOR_FIELD_FLOOR_HEIGHT	src/doom-style-renderer/load-scene.c	/^  SECTOR_FIELD_FLOOR_HEIGHT,$/;"	e	enum:SectorFields	file:
SRCS	src/doom-style-renderer/Makefile	/^SRCS := $(shell find $(PROJ_SRC) -type  f -name "*.c")$/;"	m
SRCS	src/test/Makefile	/^SRCS := $(shell find $(PROJ_SRC) -type  f -name "*.c")$/;"	m
SectorFields	src/doom-style-renderer/load-scene.c	/^enum SectorFields {$/;"	g	file:
StringView	src/doom-style-renderer/load-scene.c	/^struct StringView {$/;"	s	file:
TARGET	src/doom-style-renderer/Makefile	/^TARGET := $(PROJ_BIN)\/libdoom-style-renderer.so$/;"	m
TARGET	src/test/Makefile	/^TARGET := $(PROJ_BIN)\/test$/;"	m
TOKENS_IN_HEADER_GUARD	src/doom-style-renderer/load-scene.c	/^#define TOKENS_IN_HEADER_GUARD /;"	d	file:
Tokens	src/doom-style-renderer/load-scene.c	/^struct Tokens {$/;"	s	file:
UP	src/test/main.c	/^  UP,$/;"	e	enum:direction	file:
UTIL_ARENA_H	src/util/arena.h	/^#define UTIL_ARENA_H$/;"	d
UTIL_ARENA_H_IMPLEMENTATION	src/doom-style-renderer/renderer.c	/^#define UTIL_ARENA_H_IMPLEMENTATION$/;"	d	file:
UTIL_DYNAMIC_ARRAY	src/util/dynamic_array.h	/^#define UTIL_DYNAMIC_ARRAY$/;"	d
UTIL_FILE_IO_H	src/util/fileIO.h	/^#define UTIL_FILE_IO_H$/;"	d
UTIL_FILE_IO_IMPLEMENTATION	src/doom-style-renderer/load-scene.c	/^#define UTIL_FILE_IO_IMPLEMENTATION$/;"	d	file:
UTIL_FILE_IO_IMPLEMENTATION	src/util/fileIO.h	/^#define UTIL_FILE_IO_IMPLEMENTATION$/;"	d
UTIL_THREAD_POOL_H	src/util/thread_pool.h	/^#define UTIL_THREAD_POOL_H$/;"	d
UTIL_THREAD_POOL_IMPLEMENTATION	src/doom-style-renderer/renderer.c	/^#define UTIL_THREAD_POOL_IMPLEMENTATION$/;"	d	file:
WALL_FIELDS_COUNT	src/doom-style-renderer/load-scene.c	/^  WALL_FIELDS_COUNT,$/;"	e	enum:WallFields	file:
WALL_FIELD_IS_PORTAL	src/doom-style-renderer/load-scene.c	/^  WALL_FIELD_IS_PORTAL,$/;"	e	enum:WallFields	file:
WALL_FIELD_VERT1	src/doom-style-renderer/load-scene.c	/^  WALL_FIELD_VERT1,$/;"	e	enum:WallFields	file:
WALL_FIELD_VERT2	src/doom-style-renderer/load-scene.c	/^  WALL_FIELD_VERT2,$/;"	e	enum:WallFields	file:
WIDTH	src/test/main.c	/^#define WIDTH /;"	d	file:
WallFields	src/doom-style-renderer/load-scene.c	/^enum WallFields {$/;"	g	file:
WallSection	src/doom-style-renderer/render-walls/render-walls.c	/^struct WallSection {$/;"	s	file:
X	src/doom-style-renderer/load-scene.c	/^#define X(/;"	d	file:
__anon5585f6b00108	src/util/thread_pool.h	/^  struct {$/;"	s	struct:tp_ThreadPool
__anon5585f6b00208	src/util/thread_pool.h	/^  struct {$/;"	s	struct:tp_ThreadPool
__anon5585f6b00308	src/util/thread_pool.h	/^  struct {$/;"	s	struct:tp_ThreadPool
__anon5585f6b00408	src/util/thread_pool.h	/^  struct {$/;"	s	struct:tp_ThreadPool
a_bits	include/doom-style-renderer.h	/^  uint8_t a_bits;$/;"	m	struct:dsr_PixelFormat	typeref:typename:uint8_t
a_mask	include/doom-style-renderer.h	/^  uint32_t a_mask;$/;"	m	struct:dsr_PixelFormat	typeref:typename:uint32_t
a_shift	include/doom-style-renderer.h	/^  uint8_t a_shift;$/;"	m	struct:dsr_PixelFormat	typeref:typename:uint8_t
all	src/doom-style-renderer/Makefile	/^all: $(TARGET)$/;"	t
all	src/test/Makefile	/^all: $(TARGET)$/;"	t
arena	src/doom-style-renderer/render-walls/render-walls.c	/^  struct Arena *arena;$/;"	m	struct:RenderWallArgs	typeref:struct:Arena *	file:
arena_alloc	src/util/arena.h	/^void *arena_alloc(struct Arena *arena, size_t size) {$/;"	f	typeref:typename:void *
arena_create	src/util/arena.h	/^struct Arena arena_create(size_t size) {$/;"	f	typeref:struct:Arena
arena_free	src/util/arena.h	/^void arena_free(struct Arena *arena) {$/;"	f	typeref:typename:void
arena_resize	src/util/arena.h	/^void arena_resize(struct Arena *arena, size_t size) {$/;"	f	typeref:typename:void
arena_restore	src/util/arena.h	/^#define arena_restore(/;"	d
arena_save	src/util/arena.h	/^#define arena_save(/;"	d
aspect_ratio	src/common/camera.h	/^  float aspect_ratio;$/;"	m	struct:hog_Camera	typeref:typename:float
b_bits	include/doom-style-renderer.h	/^  uint8_t b_bits;$/;"	m	struct:dsr_PixelFormat	typeref:typename:uint8_t
b_mask	include/doom-style-renderer.h	/^  uint32_t b_mask;$/;"	m	struct:dsr_PixelFormat	typeref:typename:uint32_t
b_shift	include/doom-style-renderer.h	/^  uint8_t b_shift;$/;"	m	struct:dsr_PixelFormat	typeref:typename:uint8_t
base_offset	src/util/arena.h	/^  size_t base_offset;$/;"	m	struct:Arena	typeref:typename:size_t
bits_per_pixel	include/doom-style-renderer.h	/^  uint8_t bits_per_pixel;$/;"	m	struct:dsr_PixelFormat	typeref:typename:uint8_t
block	src/util/arena.h	/^  void *block;$/;"	m	struct:Arena	typeref:typename:void *
block_guards	src/doom-style-renderer/load-scene.c	/^static const char *block_guards[] = { $/;"	v	typeref:typename:const char * []	file:
bytes_per_pixel	include/doom-style-renderer.h	/^  uint8_t bytes_per_pixel;$/;"	m	struct:dsr_PixelFormat	typeref:typename:uint8_t
cam_sector	src/doom-style-renderer/render-walls/render-walls.c	/^  const struct dsr_Sector *cam_sector;$/;"	m	struct:WallSection	typeref:typename:const struct dsr_Sector *	file:
cam_sector_index	src/doom-style-renderer/render-walls/render-walls.c	/^  uint32_t cam_sector_index;$/;"	m	struct:RenderWallArgs	typeref:typename:uint32_t	file:
camera	src/doom-style-renderer/render-walls/render-walls.c	/^  const struct hog_Camera *camera;$/;"	m	struct:RenderWallArgs	typeref:typename:const struct hog_Camera *	file:
camera	src/doom-style-renderer/render-walls/render-walls.c	/^  const struct hog_Camera *camera;$/;"	m	struct:WallSection	typeref:typename:const struct hog_Camera *	file:
capacity	src/doom-style-renderer/load-scene.c	/^  uint64_t capacity;$/;"	m	struct:Tokens	typeref:typename:uint64_t	file:
ceil_height	include/doom-style-renderer.h	/^  float floor_height, ceil_height;$/;"	m	struct:dsr_Sector	typeref:typename:float
clipped_wall_positions	src/doom-style-renderer/render-walls/proj-math.h	/^static bool clipped_wall_positions(const vec4 relative_coords[2],$/;"	f	typeref:typename:bool
colour	src/doom-style-renderer/render-walls/render-walls.c	/^  uint8_t colour[4];$/;"	m	struct:WallSection	typeref:typename:uint8_t[4]	file:
completed_mutex	src/util/thread_pool.h	/^    pthread_mutex_t completed_mutex;$/;"	m	struct:tp_ThreadPool::__anon5585f6b00308	typeref:typename:pthread_mutex_t
count	src/doom-style-renderer/load-scene.c	/^  uint64_t count;$/;"	m	struct:Tokens	typeref:typename:uint64_t	file:
count	src/util/thread_pool.h	/^  uint32_t count;$/;"	m	struct:tp_ThreadPool	typeref:typename:uint32_t
depth_buffer	src/doom-style-renderer/render-walls/render-walls.c	/^  float *depth_buffer;$/;"	m	struct:RenderWallArgs	typeref:typename:float *	file:
depth_buffer	src/doom-style-renderer/render-walls/render-walls.c	/^  float *depth_buffer;$/;"	m	struct:WallSection	typeref:typename:float *	file:
direction	src/common/camera.h	/^  vec3 direction;$/;"	m	struct:hog_Camera	typeref:typename:vec3
direction	src/test/main.c	/^enum direction {$/;"	g	file:
draw_vertical_line	src/doom-style-renderer/render-walls/render-walls.c	/^static void draw_vertical_line(struct dsr_Surface *surface, int32_t x,$/;"	f	typeref:typename:void	file:
draw_wall_section	src/doom-style-renderer/render-walls/render-walls.c	/^static void *draw_wall_section(struct WallSection *args) {$/;"	f	typeref:typename:void *	file:
drawing_sector	src/doom-style-renderer/render-walls/render-walls.c	/^  const struct dsr_Sector *drawing_sector;$/;"	m	struct:WallSection	typeref:typename:const struct dsr_Sector *	file:
drawing_sector_index	src/doom-style-renderer/render-walls/render-walls.c	/^  uint32_t drawing_sector_index;$/;"	m	struct:RenderWallArgs	typeref:typename:uint32_t	file:
dsr_PixelFormat	include/doom-style-renderer.h	/^struct dsr_PixelFormat {$/;"	s
dsr_Scene	include/doom-style-renderer.h	/^struct dsr_Scene {$/;"	s
dsr_Sector	include/doom-style-renderer.h	/^struct dsr_Sector {$/;"	s
dsr_Surface	include/doom-style-renderer.h	/^struct dsr_Surface {$/;"	s
dsr_Wall	include/doom-style-renderer.h	/^struct dsr_Wall {$/;"	s
dsr_load_scene	src/doom-style-renderer/load-scene.c	/^bool dsr_load_scene(const char *scene_path, struct dsr_Scene *scene) {$/;"	f	typeref:typename:bool
dsr_render	src/doom-style-renderer/renderer.c	/^void dsr_render(struct Arena *arena, struct dsr_Surface *surface,$/;"	f	typeref:typename:void
dsr_render_multithreaded	src/doom-style-renderer/renderer.c	/^void dsr_render_multithreaded(struct Arena *arena, struct tp_ThreadPool *pool,$/;"	f	typeref:typename:void
dsr_render_walls	src/doom-style-renderer/render-walls/render-walls.c	/^void dsr_render_walls(struct Arena *arena, struct tp_ThreadPool *pool,$/;"	f	typeref:typename:void
far_clipping_plane	src/common/camera.h	/^  float far_clipping_plane;$/;"	m	struct:hog_Camera	typeref:typename:float
fio_read_file	src/util/fileIO.h	/^char *fio_read_file(const char *path) {$/;"	f	typeref:typename:char *
floor_height	include/doom-style-renderer.h	/^  float floor_height, ceil_height;$/;"	m	struct:dsr_Sector	typeref:typename:float
fov	src/common/camera.h	/^  float fov; \/\/ In radians$/;"	m	struct:hog_Camera	typeref:typename:float
from_sector_index	src/doom-style-renderer/render-walls/render-walls.c	/^  int64_t from_sector_index;$/;"	m	struct:Portal	typeref:typename:int64_t	file:
g_bits	include/doom-style-renderer.h	/^  uint8_t g_bits;$/;"	m	struct:dsr_PixelFormat	typeref:typename:uint8_t
g_mask	include/doom-style-renderer.h	/^  uint32_t g_mask;$/;"	m	struct:dsr_PixelFormat	typeref:typename:uint32_t
g_shift	include/doom-style-renderer.h	/^  uint8_t g_shift;$/;"	m	struct:dsr_PixelFormat	typeref:typename:uint8_t
get_block_type	src/doom-style-renderer/load-scene.c	/^get_block_type(enum BlockGuard guard, enum BlockType old, enum BlockType *new) {$/;"	f	typeref:enum:ParseErrors	file:
get_draw_height	src/doom-style-renderer/render-walls/render-walls.c	/^static bool get_draw_height(struct PortalMask *mask, int32_t x, int y[2],$/;"	f	typeref:typename:bool	file:
get_draw_width	src/doom-style-renderer/render-walls/render-walls.c	/^static void get_draw_width(struct PortalMask *mask, int x[2],$/;"	f	typeref:typename:void	file:
get_float	src/doom-style-renderer/load-scene.c	/^static float get_float(const struct Tokens *tokens, uint64_t index,$/;"	f	typeref:typename:float	file:
get_line_length	src/doom-style-renderer/load-scene.c	/^static inline uint64_t get_line_length(const struct Tokens *tokens,$/;"	f	typeref:typename:uint64_t	file:
get_relative_coords	src/doom-style-renderer/render-walls/proj-math.h	/^static inline void get_relative_coords(const struct hog_Camera *camera,$/;"	f	typeref:typename:void
get_uint32	src/doom-style-renderer/load-scene.c	/^static uint32_t get_uint32(const struct Tokens *tokens, uint64_t index,$/;"	f	typeref:typename:uint32_t	file:
get_world_coords	src/doom-style-renderer/render-walls/proj-math.h	/^static inline void get_world_coords(const vec2 map_coords, vec4 world_coords) {$/;"	f	typeref:typename:void
handle	src/util/thread_pool.h	/^  tp_JobHandle handle;$/;"	m	struct:tp_Job	typeref:typename:tp_JobHandle
handle_counter	src/util/thread_pool.h	/^    uint64_t handle_counter;$/;"	m	struct:tp_ThreadPool::__anon5585f6b00208	typeref:typename:uint64_t
handle_counter_mutex	src/util/thread_pool.h	/^    pthread_mutex_t handle_counter_mutex;$/;"	m	struct:tp_ThreadPool::__anon5585f6b00208	typeref:typename:pthread_mutex_t
height	include/doom-style-renderer.h	/^  int32_t width, height;$/;"	m	struct:dsr_Surface	typeref:typename:int32_t
hog_Camera	src/common/camera.h	/^struct hog_Camera {$/;"	s
hog_ProjType	src/common/camera.h	/^enum hog_ProjType {$/;"	g
in	src/util/thread_pool.h	/^  void *in;$/;"	m	struct:tp_Job	typeref:typename:void *
int_clamp	src/doom-style-renderer/render-walls/proj-math.h	/^static inline int32_t int_clamp(int32_t val, int32_t min_val, int32_t max_val) {$/;"	f	typeref:typename:int32_t
intersect_line_segments	src/doom-style-renderer/render-walls/proj-math.h	/^static bool intersect_line_segments(const vec4 line1[2], const vec4 line2[2],$/;"	f	typeref:typename:bool
intersect_line_segments	src/test/main.c	/^static bool intersect_line_segments(const vec4 line1[2], const vec4 line2[2],$/;"	f	typeref:typename:bool	file:
is_portal	include/doom-style-renderer.h	/^  bool is_portal;$/;"	m	struct:dsr_Wall	typeref:typename:bool
is_zero	src/doom-style-renderer/render-walls/proj-math.h	/^static inline bool is_zero(float n, float eps) {$/;"	f	typeref:typename:bool
is_zero	src/test/main.c	/^static inline bool is_zero(float n, float eps) {$/;"	f	typeref:typename:bool	file:
items	src/doom-style-renderer/load-scene.c	/^  struct StringView *items;$/;"	m	struct:Tokens	typeref:struct:StringView *	file:
job	src/util/thread_pool.h	/^  tp_JobCallback job;$/;"	m	struct:tp_Job	typeref:typename:tp_JobCallback
job_mutex	src/util/thread_pool.h	/^    pthread_mutex_t job_mutex;$/;"	m	struct:tp_ThreadPool::__anon5585f6b00108	typeref:typename:pthread_mutex_t
length	src/doom-style-renderer/load-scene.c	/^  uint64_t length;$/;"	m	struct:StringView	typeref:typename:uint64_t	file:
main	src/test/main.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
moving	src/test/main.c	/^bool moving[DIR_COUNT] = { 0 };$/;"	v	typeref:typename:bool[]
near_clipping_plane	src/common/camera.h	/^  float near_clipping_plane;$/;"	m	struct:hog_Camera	typeref:typename:float
out	src/util/thread_pool.h	/^  void *out;$/;"	m	struct:tp_Job	typeref:typename:void *
parse	src/doom-style-renderer/load-scene.c	/^static enum ParseErrors parse(const struct Tokens *tokens,$/;"	f	typeref:enum:ParseErrors	file:
parse_block_guard	src/doom-style-renderer/load-scene.c	/^static enum ParseErrors parse_block_guard(const struct Tokens *tokens,$/;"	f	typeref:enum:ParseErrors	file:
parse_errors	src/doom-style-renderer/load-scene.c	/^static const char *parse_errors[] = { $/;"	v	typeref:typename:const char * []	file:
parse_sector	src/doom-style-renderer/load-scene.c	/^static enum ParseErrors parse_sector(const struct Tokens *tokens,$/;"	f	typeref:enum:ParseErrors	file:
parse_vert	src/doom-style-renderer/load-scene.c	/^static enum ParseErrors parse_vert(const struct Tokens *tokens, uint64_t index,$/;"	f	typeref:enum:ParseErrors	file:
parse_wall	src/doom-style-renderer/load-scene.c	/^static enum ParseErrors parse_wall(const struct Tokens *tokens, uint64_t index,$/;"	f	typeref:enum:ParseErrors	file:
pixel_format	include/doom-style-renderer.h	/^  struct dsr_PixelFormat pixel_format;$/;"	m	struct:dsr_Surface	typeref:struct:dsr_PixelFormat
pixels	include/doom-style-renderer.h	/^  void *pixels;$/;"	m	struct:dsr_Surface	typeref:typename:void *
pool	src/doom-style-renderer/render-walls/render-walls.c	/^  struct tp_ThreadPool *pool;$/;"	m	struct:RenderWallArgs	typeref:struct:tp_ThreadPool *	file:
pool	src/util/thread_pool.h	/^  pthread_t *pool;$/;"	m	struct:tp_ThreadPool	typeref:typename:pthread_t *
portal	src/doom-style-renderer/render-walls/render-walls.c	/^  const struct Portal *portal;$/;"	m	struct:RenderWallArgs	typeref:typename:const struct Portal *	file:
portal	src/doom-style-renderer/render-walls/render-walls.c	/^  const struct Portal *portal;$/;"	m	struct:WallSection	typeref:typename:const struct Portal *	file:
portal_mask	src/doom-style-renderer/render-walls/render-walls.c	/^  struct PortalMask *portal_mask;$/;"	m	struct:Portal	typeref:struct:PortalMask *	file:
portal_queue	src/doom-style-renderer/render-walls/render-walls.c	/^  struct PortalQueue portal_queue;$/;"	m	struct:RenderWallArgs	typeref:struct:PortalQueue	file:
portal_screen_space	src/doom-style-renderer/render-walls/render-walls.c	/^  int32_t portal_screen_space[4][2]; \/\/ Unclamped portal coords$/;"	m	struct:PortalMask	typeref:typename:int32_t[4][2]	file:
position	src/common/camera.h	/^  vec3 position;$/;"	m	struct:hog_Camera	typeref:typename:vec3
prev	src/doom-style-renderer/render-walls/render-walls.c	/^  struct PortalMask *prev;$/;"	m	struct:PortalMask	typeref:struct:PortalMask *	file:
proj_plane_size	src/doom-style-renderer/render-walls/render-walls.c	/^  const vec2 proj_plane_size;$/;"	m	struct:RenderWallArgs	typeref:typename:const vec2	file:
proj_type	src/common/camera.h	/^  enum hog_ProjType proj_type;$/;"	m	struct:hog_Camera	typeref:enum:hog_ProjType
r_bits	include/doom-style-renderer.h	/^  uint8_t r_bits;$/;"	m	struct:dsr_PixelFormat	typeref:typename:uint8_t
r_mask	include/doom-style-renderer.h	/^  uint32_t r_mask;$/;"	m	struct:dsr_PixelFormat	typeref:typename:uint32_t
r_shift	include/doom-style-renderer.h	/^  uint8_t r_shift;$/;"	m	struct:dsr_PixelFormat	typeref:typename:uint8_t
render_impl	src/doom-style-renderer/renderer.c	/^static void render_impl(struct Arena *arena, struct dsr_Surface *surface,$/;"	f	typeref:typename:void	file:
render_wall	src/doom-style-renderer/render-walls/render-walls.c	/^static void render_wall(struct RenderWallArgs *args) {$/;"	f	typeref:typename:void	file:
scene	src/doom-style-renderer/render-walls/render-walls.c	/^  const struct dsr_Scene *scene;$/;"	m	struct:RenderWallArgs	typeref:typename:const struct dsr_Scene *	file:
scene	src/doom-style-renderer/render-walls/render-walls.c	/^  const struct dsr_Scene *scene;$/;"	m	struct:WallSection	typeref:typename:const struct dsr_Scene *	file:
screen_space	src/doom-style-renderer/render-walls/render-walls.c	/^  int32_t screen_space[4][2];$/;"	m	struct:WallSection	typeref:typename:int32_t[4][2]	file:
sector_index	src/doom-style-renderer/render-walls/render-walls.c	/^  uint32_t sector_index;$/;"	m	struct:Portal	typeref:typename:uint32_t	file:
seperators	src/doom-style-renderer/load-scene.c	/^static const char seperators[] = " \\t"; \/\/ Removed$/;"	v	typeref:typename:const char[]	file:
shared_count	include/doom-style-renderer.h	/^  uint8_t shared_count;$/;"	m	struct:dsr_Wall	typeref:typename:uint8_t
shared_with	include/doom-style-renderer.h	/^  uint32_t shared_with[2]; \/\/ Indices of sectors that share this wall$/;"	m	struct:dsr_Wall	typeref:typename:uint32_t[2]
should_exit	src/util/thread_pool.h	/^    bool should_exit;$/;"	m	struct:tp_ThreadPool::__anon5585f6b00408	typeref:typename:bool
should_exit_mutex	src/util/thread_pool.h	/^    pthread_mutex_t should_exit_mutex;$/;"	m	struct:tp_ThreadPool::__anon5585f6b00408	typeref:typename:pthread_mutex_t
sign	src/doom-style-renderer/render-walls/render-walls.c	/^  int32_t sign;$/;"	m	struct:WallSection	typeref:typename:int32_t	file:
size	src/util/arena.h	/^  size_t size;$/;"	m	struct:Arena	typeref:typename:size_t
special	src/doom-style-renderer/load-scene.c	/^static const char special[] = "[]#,\\n"; \/\/ Preseverved as tokens$/;"	v	typeref:typename:const char[]	file:
stride	include/doom-style-renderer.h	/^  int32_t stride; \/\/ In bytes$/;"	m	struct:dsr_Surface	typeref:typename:int32_t
surface	src/doom-style-renderer/render-walls/render-walls.c	/^  struct dsr_Surface *surface;$/;"	m	struct:RenderWallArgs	typeref:struct:dsr_Surface *	file:
surface	src/doom-style-renderer/render-walls/render-walls.c	/^  struct dsr_Surface *surface;$/;"	m	struct:WallSection	typeref:struct:dsr_Surface *	file:
to_screen_space	src/doom-style-renderer/render-walls/render-walls.c	/^static inline void to_screen_space(const struct dsr_Surface *surface,$/;"	f	typeref:typename:void	file:
tokenize	src/doom-style-renderer/load-scene.c	/^static struct Tokens tokenize(const char *src) {$/;"	f	typeref:struct:Tokens	file:
tp_Job	src/util/thread_pool.h	/^struct tp_Job {$/;"	s
tp_JobCallback	src/util/thread_pool.h	/^typedef void *(*tp_JobCallback)(void *input);$/;"	t	typeref:typename:void * (*)(void * input)
tp_JobHandle	src/util/thread_pool.h	/^typedef uint64_t tp_JobHandle;$/;"	t	typeref:typename:uint64_t
tp_ThreadPool	src/util/thread_pool.h	/^struct tp_ThreadPool {$/;"	s
tp_add_job	src/util/thread_pool.h	/^tp_JobHandle tp_add_job(struct tp_ThreadPool *pool, tp_JobCallback job,$/;"	f	typeref:typename:tp_JobHandle
tp_create_pool	src/util/thread_pool.h	/^struct tp_ThreadPool *tp_create_pool(uint32_t num_threads) {$/;"	f	typeref:struct:tp_ThreadPool *
tp_free_pool	src/util/thread_pool.h	/^void tp_free_pool(struct tp_ThreadPool *pool) {$/;"	f	typeref:typename:void
tp_wait_job	src/util/thread_pool.h	/^void *tp_wait_job(struct tp_ThreadPool *pool, tp_JobHandle handle) {$/;"	f	typeref:typename:void *
tp_worker	src/util/thread_pool.h	/^void *tp_worker(void *p) {$/;"	f	typeref:typename:void *
turning	src/test/main.c	/^int32_t turning = 0;$/;"	v	typeref:typename:int32_t
update_dsr_surface	src/test/main.c	/^void update_dsr_surface(struct dsr_Surface *dsr_surface,$/;"	f	typeref:typename:void
vertices	include/doom-style-renderer.h	/^  uint64_t vertices[2]; \/\/ Vertex indices$/;"	m	struct:dsr_Wall	typeref:typename:uint64_t[2]
view	src/doom-style-renderer/load-scene.c	/^  const char *view;$/;"	m	struct:StringView	typeref:typename:const char *	file:
wall	src/doom-style-renderer/render-walls/render-walls.c	/^  const struct dsr_Wall *wall;$/;"	m	struct:WallSection	typeref:typename:const struct dsr_Wall *	file:
wall_colour	src/doom-style-renderer/render-walls/render-walls.c	/^  uint8_t wall_colour[4];$/;"	m	struct:RenderWallArgs	typeref:typename:uint8_t[4]	file:
wall_index	src/doom-style-renderer/render-walls/render-walls.c	/^  uint32_t wall_index;$/;"	m	struct:RenderWallArgs	typeref:typename:uint32_t	file:
width	include/doom-style-renderer.h	/^  int32_t width, height;$/;"	m	struct:dsr_Surface	typeref:typename:int32_t
x1	src/doom-style-renderer/render-walls/render-walls.c	/^  int32_t x1, x2, z1, z2; \/\/ Range of the entire wall$/;"	m	struct:WallSection	typeref:typename:int32_t	file:
x2	src/doom-style-renderer/render-walls/render-walls.c	/^  int32_t x1, x2, z1, z2; \/\/ Range of the entire wall$/;"	m	struct:WallSection	typeref:typename:int32_t	file:
x_projection	src/doom-style-renderer/render-walls/proj-math.h	/^static inline float x_projection(const struct hog_Camera *camera,$/;"	f	typeref:typename:float
x_range	src/doom-style-renderer/render-walls/render-walls.c	/^  int32_t x_range[2]; \/\/ Range of wall section$/;"	m	struct:WallSection	typeref:typename:int32_t[2]	file:
y_projection	src/doom-style-renderer/render-walls/proj-math.h	/^static inline void y_projection(const struct hog_Camera *camera,$/;"	f	typeref:typename:void
z1	src/doom-style-renderer/render-walls/render-walls.c	/^  int32_t x1, x2, z1, z2; \/\/ Range of the entire wall$/;"	m	struct:WallSection	typeref:typename:int32_t	file:
z2	src/doom-style-renderer/render-walls/render-walls.c	/^  int32_t x1, x2, z1, z2; \/\/ Range of the entire wall$/;"	m	struct:WallSection	typeref:typename:int32_t	file:
